1.Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
    answer: a0-1, a2-a7 can be used as function arguments register; register a2 holds.

2.Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.) 
    answer: function f anfd function g has be optimized by compiler.

3.At what address is the function printf located? 
    answer:0x0000000000000630, main calls it with pc-relative addressing.

4.What value is in the register ra just after the jalr to printf in main?
    answer: 0x38, the address of next line of the jalr to printf.
5.Run the following code.

	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);
      

What is the output? Here's an ASCII table that maps bytes to characters.

The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
    answer:"He110 World"; 0x726c6400; no, 57616 is 110 in hex regardless of endianness.

6.In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
    answer: A random value depending on what codes there are right before the call.Because printf tried to read more arguments than supplied.
        The second argument `3` is passed in a1, and the register for the third argument, a2, is not set to any specific value before the
        call, and contains whatever there is before the call.

